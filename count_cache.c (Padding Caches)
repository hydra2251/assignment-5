#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <sys/time.h>

#define ARRAY_SIZE 1000000
#define CACHE_LINE_SIZE 64 // Adjust this according to your system's L1 cache line size

int *array;
int length;
int num_threads;

struct PrivateCount {
    int count;
    char padding[CACHE_LINE_SIZE - sizeof(int)]; // Padding to fill the cache line
};

struct PrivateCount *private_counts;

void *count1s(void *arg) {
    int thread_id = *((int *)arg);
    int chunk_size = length / num_threads;
    int start = thread_id * chunk_size;
    int end = (thread_id == num_threads - 1) ? length : start + chunk_size;

    int private_count = 0;

    for (int i = start; i < end; i++) {
        if (array[i] == 1) {
            private_count++;
        }
    }

    private_counts[thread_id].count = private_count;

    pthread_exit(NULL);
}

double getExecutionTime(struct timeval start, struct timeval end) {
    return (end.tv_sec - start.tv_sec) + (end.tv_usec - start.tv_usec) / 1e6;
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <num_threads>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    num_threads = atoi(argv[1]);
    length = ARRAY_SIZE;

    array = (int *)malloc(length * sizeof(int));
    srand(time(NULL));
    for (int i = 0; i < length; i++) {
        array[i] = rand() % 6; // Values between 0 and 5 (inclusive)
    }

    pthread_t threads[num_threads];
    int thread_ids[num_threads];

    private_counts = (struct PrivateCount *)malloc(num_threads * sizeof(struct PrivateCount));

    struct timeval start, end;
    gettimeofday(&start, NULL);

    for (int i = 0; i < num_threads; i++) {
        thread_ids[i] = i;
        pthread_create(&threads[i], NULL, count1s, (void *)&thread_ids[i]);
    }

    for (int i = 0; i < num_threads; i++) {
        pthread_join(threads[i], NULL);
    }

    int total_count = 0;
    for (int i = 0; i < num_threads; i++) {
        total_count += private_counts[i].count;
    }

    gettimeofday(&end, NULL);

    printf("Number of ones: %d\n", total_count);
    printf("Execution time: %f seconds\n", getExecutionTime(start, end));

    free(array);
    free(private_counts);

    return 0;
}
